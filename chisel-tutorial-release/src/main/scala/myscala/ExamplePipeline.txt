module PIPELINE_ADDER#(
		parameter DATA_WIDTH = 16
	)
	(
		input clk,
		input rst_n,
		input [DATA_WIDTH-1:0] a_in ,
		input [DATA_WIDTH-1:0] b_in,
		input [DATA_WIDTH-1:0] c_in ,
		input vld_in,
		output reg [DATA_WIDTH-1:0] s_out ,
		output reg vld_out

	);

	// 这里没有必要都定义成reg类型
	wire [DATA_WIDTH-1:0] plus_s1 ;
	reg [DATA_WIDTH-1:0] plus_s2 ;
	wire [DATA_WIDTH-1:0] plus_out ;

	// stage 1
	reg [DATA_WIDTH-1:0] a_reg ;
	reg [DATA_WIDTH-1:0] b_reg ;
	reg [DATA_WIDTH-1:0] c_reg ;

	// stage 2
	reg [DATA_WIDTH-1:0] c_reg_s2 ;

	reg vld_s1, vld_s2;


	// control path
	always @(posedge clk or posedge rst_n) begin
		if (!rst_n) begin
			// reset
			vld_s1 <= 1'b0;
			vld_s2 <= 1'b0;
			vld_out <= 1'b0;

		end
		else if (rst_n) begin
			vld_s1 <= vld_in;
			vld_s2 <= vld_s1;
			vld_out <= vld_s2;
		end
	end

	// input data -> stage1
	always @(posedge clk or posedge rst_n) begin
		if (rst_n) begin
			if (vld_in) begin
				// vld_in is true
				a_reg <= a_in;
				b_reg <= b_in;
				c_reg <= c_in;
			end
		end

		else begin
			a_reg <= 16'd0;
			b_reg <= 16'd0;
			c_reg <= 16'd0;
		end
	end

	// stage1 -> stage2
	assign plus_s1 = a_reg + b_reg;
	always @(posedge clk or posedge rst_n) begin
		if (rst_n) begin
			if (vld_s1) begin
				plus_s2 <= plus_s1;
				c_reg_s2 <= c_reg;
			end
		end
		else begin
			plus_s2 <= 16'd0;
			c_reg_s2 <= 16'd0;
		end
	end

	// stage2 -> out
	assign  plus_out = plus_s2 + c_reg_s2;
	always @(posedge clk or posedge rst_n) begin
		if (rst_n) begin
			if (vld_s2) begin
				s_out <= plus_out;
			end
		end
		else
		       s_out <= 16'd0;

	end


endmodule
————————————————
版权声明：本文为CSDN博主「wangbowj123」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/wangbowj123/article/details/107213477




// control path
	wire rdy_s1, rdy_s2, rdy_in;
	wire ena_s1, ena_s2, ena_out;
	wire handshake_s1, handshake_s2, handshake_out;

	// input data -> stage1
	assign rdy_s1 = ena_s2;
	assign handshake_s1 = rdy_s1 & vld_s1;
	assign ena_s1 = handshake_s1 | ~vld_s1;
	always @(posedge clk or posedge rst_n) begin
		if (!rst_n) begin
			// reset
			vld_s1 <= 1'b0;
		end
		else if (ena_s1) begin
			vld_s1 <= vld_in;
		end
	end

	// stage 1 -> stage 2
	assign rdy_s2 = ena_out;
	assign handshake_s2 = rdy_s2 & vld_s2;
	assign ena_s2 = handshake_s2 | ~vld_s2;
	always @(posedge clk or posedge rst_n) begin
		if (!rst_n) begin
			// reset
			vld_s2 <= 1'b0;
		end
		else if (ena_s2) begin
			vld_s2 <= vld_s1;
		end
	end

	// stage 2 -> out
	assign handshake_out = rdy_in & vld_out;
	assign ena_out = handshake_out | ~vld_out;
	always @(posedge clk or posedge rst_n) begin
		if (rst_n) begin
			// reset
			vld_out <= 1'b0;
		end
		else if (ena_out) begin
			vld_out <= vld_s2;
		end
	end
